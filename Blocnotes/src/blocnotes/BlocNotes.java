/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package blocnotes;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.undo.UndoManager;
import java.awt.print.PrinterJob;
import java.awt.print.PageFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;


/**
 *
 * @author YASSALIE
 */
public class BlocNotes extends javax.swing.JFrame {

    UndoManager manager = new UndoManager();
    JFileChooser jfc1 = new JFileChooser();
    JFontChooser jf = new JFontChooser();

    //ArrayList<String> copiedText = new ArrayList<>();

    /**
     * Creates new form BlocNotes
     */
    public BlocNotes() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jmNewFile = new javax.swing.JMenuItem();
        jOpenFile = new javax.swing.JMenuItem();
        jmSave = new javax.swing.JMenuItem();
        jmSaveAs = new javax.swing.JMenuItem();
        jmPage = new javax.swing.JMenuItem();
        jmPrint = new javax.swing.JMenuItem();
        jmExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jmUndo = new javax.swing.JMenuItem();
        jmCut = new javax.swing.JMenuItem();
        jmCopy = new javax.swing.JMenuItem();
        jmPaste = new javax.swing.JMenuItem();
        jmSeek = new javax.swing.JMenuItem();
        jmSeekNext = new javax.swing.JMenuItem();
        jmSeekReplace = new javax.swing.JMenuItem();
        jmGet = new javax.swing.JMenuItem();
        jmSelectAll = new javax.swing.JMenuItem();
        jmDateTime = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        ChkBWordWrap = new javax.swing.JCheckBoxMenuItem();
        jmFont = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jmAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sans titre - Bloc Notes ");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        jMenu1.setText("Fichier");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jmNewFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jmNewFile.setText("Nouveau");
        jmNewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmNewFileActionPerformed(evt);
            }
        });
        jMenu1.add(jmNewFile);

        jOpenFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jOpenFile.setText("Ouvrir...");
        jOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenFileActionPerformed(evt);
            }
        });
        jMenu1.add(jOpenFile);

        jmSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jmSave.setText("Enregistrer");
        jmSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmSaveActionPerformed(evt);
            }
        });
        jMenu1.add(jmSave);

        jmSaveAs.setText("Enregistrer sous...");
        jmSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmSaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(jmSaveAs);

        jmPage.setText("Mise en page ...");
        jmPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmPageActionPerformed(evt);
            }
        });
        jMenu1.add(jmPage);

        jmPrint.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jmPrint.setText("Imprimer");
        jmPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmPrintActionPerformed(evt);
            }
        });
        jMenu1.add(jmPrint);

        jmExit.setText("Quitter");
        jmExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmExitActionPerformed(evt);
            }
        });
        jMenu1.add(jmExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edition");

        jmUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jmUndo.setText("Annuler");
        jmUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmUndoActionPerformed(evt);
            }
        });
        jMenu2.add(jmUndo);

        jmCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jmCut.setText("Couper");
        jmCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmCutActionPerformed(evt);
            }
        });
        jMenu2.add(jmCut);

        jmCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jmCopy.setText("Copier");
        jmCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmCopyActionPerformed(evt);
            }
        });
        jMenu2.add(jmCopy);

        jmPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jmPaste.setText("Coller");
        jmPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmPasteActionPerformed(evt);
            }
        });
        jMenu2.add(jmPaste);

        jmSeek.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jmSeek.setText("Rechercher...");
        jmSeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmSeekActionPerformed(evt);
            }
        });
        jMenu2.add(jmSeek);

        jmSeekNext.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jmSeekNext.setText("Rechercher le suivant");
        jMenu2.add(jmSeekNext);

        jmSeekReplace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jmSeekReplace.setText("Remplacer");
        jmSeekReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmSeekReplaceActionPerformed(evt);
            }
        });
        jMenu2.add(jmSeekReplace);

        jmGet.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jmGet.setText("Atteindre");
        jmGet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmGetActionPerformed(evt);
            }
        });
        jMenu2.add(jmGet);

        jmSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jmSelectAll.setText("Séléctionner tout");
        jmSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmSelectAllActionPerformed(evt);
            }
        });
        jMenu2.add(jmSelectAll);

        jmDateTime.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jmDateTime.setText("Date et heure");
        jmDateTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmDateTimeActionPerformed(evt);
            }
        });
        jMenu2.add(jmDateTime);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Format");

        ChkBWordWrap.setText("Retour à la ligne automatique");
        ChkBWordWrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkBWordWrapActionPerformed(evt);
            }
        });
        jMenu3.add(ChkBWordWrap);

        jmFont.setText("Police...");
        jmFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmFontActionPerformed(evt);
            }
        });
        jMenu3.add(jmFont);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Affichage");

        jMenuItem5.setText("Barre de status");
        jMenu4.add(jMenuItem5);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("?");

        jmAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jmAbout.setText("A propos");
        jmAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmAboutActionPerformed(evt);
            }
        });
        jMenu5.add(jmAbout);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 783, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmNewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmNewFileActionPerformed
        // TODO add your handling code here:
        if (jTextArea1.getText().isEmpty() == false) {//condition si le text area n'est pas vide
            //jTextArea1.setText("nn vide");
            String message = "Voulez vous enregistrer les modifications de sans titre";
            String titre = "Bloc Notes";

            Object[] options = {"Enregistrer", "Ne pas enregistrer", "Annuler"};
            int a = JOptionPane.showOptionDialog(null, message, titre,
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                    null, options, options[0]);
            switch (a) {
                case -1:
                    break;
                case 0:

                    jfc1.setDialogTitle("Enregistrer sous");
                    FileNameExtensionFilter filter = new FileNameExtensionFilter("Fichiers Texte (*.txt)", "txt");
                    jfc1.setFileFilter(filter);
                    int result = jfc1.showSaveDialog(null);
                    if (result == JFileChooser.APPROVE_OPTION) {
                        String content = jTextArea1.getText();
                        File filetosave = jfc1.getSelectedFile();
                        try {
                            FileWriter fw = new FileWriter(filetosave.getPath());
                            fw.write(content);
                            fw.flush();
                            fw.close();
                            this.setTitle(filetosave.getName());
                        } catch (Exception e2) {
                            JOptionPane.showMessageDialog(null, e2.getMessage());
                        }
                    }
                 //File fileToSave=new File(jfc1.getName());
                    //jTextArea1.setText(""+b);
                    break;
                case 1:
                    jTextArea1.setText("");
                    break;
                case 2:
                    break;
            }
        } else {
            jTextArea1.setText("");
        }
    }//GEN-LAST:event_jmNewFileActionPerformed

    private void ChkBWordWrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkBWordWrapActionPerformed
        if (ChkBWordWrap.isSelected() == true) {
            jTextArea1.setLineWrap(true);
        } else {
            jTextArea1.setLineWrap(false);
        }

    }//GEN-LAST:event_ChkBWordWrapActionPerformed

    private void jmFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmFontActionPerformed
        // TODO add your handling code here:

        jf.showDialog(jTextArea1);
        jTextArea1.setFont(jf.getSelectedFont());

    }//GEN-LAST:event_jmFontActionPerformed

    private void jOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenFileActionPerformed
        // TODO add your handling code here:

        if (jTextArea1.getText().isEmpty() == false) {//si la zone de texte contient du texte

            String message = "Voulez vous enregistrer les modifications de " + this.getTitle();
            String titre = "Bloc Notes";

            Object[] options = {"Enregistrer", "Ne pas enregistrer", "Annuler"};
            int a = JOptionPane.showOptionDialog(null, message, titre,
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                    null, options, options[0]);
            switch (a) {
                case 0:
                    jfc1.setDialogTitle("Enregistrer sous");
                    FileNameExtensionFilter filtre = new FileNameExtensionFilter("Fichiers Texte (*.txt)", "txt");
                    jfc1.setFileFilter(filtre);
                    int result = jfc1.showSaveDialog(null);
                    if (result == JFileChooser.APPROVE_OPTION) {
                        String content = jTextArea1.getText();
                        File filetosave = jfc1.getSelectedFile();
                        try {
                            FileWriter fw = new FileWriter(filetosave.getPath());
                            fw.write(content);
                            fw.flush();
                            fw.close();
                        } catch (Exception e2) {
                            JOptionPane.showMessageDialog(null, e2.getMessage());
                        }
                    }
                    //JFileChooser jfc = new JFileChooser();
                    FileNameExtensionFilter filter = new FileNameExtensionFilter("Fichiers Texte (*.txt)", "txt");
                    jfc1.setFileFilter(filter);

                    int rest = jfc1.showOpenDialog(this);
                    if (rest == 0) {
                        File file1 = jfc1.getSelectedFile();
                        try {
                            FileInputStream fis = new FileInputStream(file1);
                            Scanner sc = new Scanner(fis);
                            jTextArea1.setText("");
                            while (sc.hasNextLine()) {
                                jTextArea1.setText(jTextArea1.getText() + sc.nextLine() + "\n");
                            }
                            this.setTitle("" + jfc1.getName(file1));
                        } catch (IOException e) {
                          JOptionPane.showMessageDialog(this, "Erreur " + e.toString());
                        }
                    }
                    break;
                case 1:
                    FileNameExtensionFilter filtre1 = new FileNameExtensionFilter("Fichiers Texte (*.txt)", "txt");
                    jfc1.setFileFilter(filtre1);
                    //int returnValue=jfc.showOpenDialog(jMenu1);
                    File file2 = jfc1.getSelectedFile();
                    try {
                        FileInputStream fis = new FileInputStream(file2);
                        Scanner sc = new Scanner(fis);
                        jTextArea1.setText("");
                        while (sc.hasNextLine()) {
                            jTextArea1.setText(jTextArea1.getText() + sc.nextLine() + "\n");
                        }
                        this.setTitle("" + jfc1.getName(file2));
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(this, "Erreur " + e.toString());
                    }
                    break;

                case 2:
                    break;
            }
        } else {
            jfc1.setDialogTitle("Ouvrir un fichier texte");
            FileNameExtensionFilter filtre = new FileNameExtensionFilter("Fichiers Texte (*.txt)", "txt");
            jfc1.setFileFilter(filtre);
            int result = jfc1.showOpenDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {

                try {
                    File file1 = jfc1.getSelectedFile();
                    FileInputStream fis = new FileInputStream(file1);
                    Scanner sc = new Scanner(fis);
                    jTextArea1.setText("");
                    while (sc.hasNextLine()) {

                        jTextArea1.setText(jTextArea1.getText() + sc.nextLine() + "\n");
                    }
                    this.setTitle("" + jfc1.getName(file1));
                } catch (IOException e) {

                    JOptionPane.showMessageDialog(this, "Erreur " + e.toString());
                }
            }
        }
    }//GEN-LAST:event_jOpenFileActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jmSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmSaveActionPerformed
        // TODO add your handling code here:
        //if ((tosave==true) || (this.getTitle()=="Sans titre - Bloc Notes")||()){
        jfc1.setDialogTitle("Enregistrer sous");
        FileNameExtensionFilter filtre = new FileNameExtensionFilter("Fichiers Texte (*.txt)", "txt");
        jfc1.setFileFilter(filtre);
        int result = jfc1.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            String content = jTextArea1.getText();
            File filetosave = jfc1.getSelectedFile();
            try {
                FileWriter fw = new FileWriter(filetosave.getPath());
                fw.write(content);
                fw.flush();
                fw.close();
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.getMessage());
            }
        }
        //}

    }//GEN-LAST:event_jmSaveActionPerformed

    private void jmExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jmExitActionPerformed

    private void jmPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmPrintActionPerformed
        // TODO add your handling code here:
        PrintUtilities printHelper = new PrintUtilities(jTextArea1);
        printHelper.print();
    }//GEN-LAST:event_jmPrintActionPerformed

    private void jmPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmPageActionPerformed
        // TODO add your handling code here:
        /* Initialize PrinterJob */
        PrinterJob pj = PrinterJob.getPrinterJob();
        PageFormat pf = pj.pageDialog(pj.defaultPage());
    }//GEN-LAST:event_jmPageActionPerformed

    private void jmUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmUndoActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_jmUndoActionPerformed

    private void jTextArea1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyPressed
        // TODO add your handling code here:


    }//GEN-LAST:event_jTextArea1KeyPressed

    private void jmGetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmGetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmGetActionPerformed

    private void jmDateTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmDateTimeActionPerformed
        // TODO add your handling code here:
        String timeStamp = new SimpleDateFormat("HH:mm dd/MM/yyyy").format(Calendar.getInstance().getTime());
        jTextArea1.setText(jTextArea1.getText() + timeStamp);

    }//GEN-LAST:event_jmDateTimeActionPerformed

    private void jmSeekReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmSeekReplaceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmSeekReplaceActionPerformed

    private void jmSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmSaveAsActionPerformed
        // TODO add your handling code here:
        jfc1.setDialogTitle("Enregistrer sous");
        FileNameExtensionFilter filtre = new FileNameExtensionFilter("Fichiers Texte (*.txt)", "txt");
        jfc1.setFileFilter(filtre);
        int result = jfc1.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            String content = jTextArea1.getText();
            File filetosave = jfc1.getSelectedFile();
            try {
                FileWriter fw = new FileWriter(filetosave.getPath());
                fw.write(content);
                fw.flush();
                fw.close();
                this.setTitle("" + jfc1.getName(filetosave));
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.getMessage());
            }
        }
    }//GEN-LAST:event_jmSaveAsActionPerformed

    private void jmSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmSelectAllActionPerformed
        jTextArea1.selectAll();
    }//GEN-LAST:event_jmSelectAllActionPerformed

    private void jmCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmCopyActionPerformed
        // TODO add your handling code here:
        //if (jtex)
        jTextArea1.copy();

    }//GEN-LAST:event_jmCopyActionPerformed

    private void jmPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmPasteActionPerformed
        // TODO add your handling code here:
        jTextArea1.paste();
    }//GEN-LAST:event_jmPasteActionPerformed

    private void jmSeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmSeekActionPerformed
        // TODO add your handling code here:
        String key = JOptionPane.showInputDialog("Chercher :");
        String texte = jTextArea1.getText();
        if (texte.contains(key) == false) {
            JOptionPane.showMessageDialog(this, "Introuvable");
        } else {
            int start=texte.indexOf(key);
            int end=key.length();
            jTextArea1.select(start, end);
            

            //JOptionPane.showMessageDialog(this, texte.indexOf(key) + "" + key.length());
        }
         
    }//GEN-LAST:event_jmSeekActionPerformed

    private void jmAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmAboutActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Ceci est une application Bloc Notes, Réalisée sous l'encadrement du Professeur Nfaoui.\n"
                + "de l'Université Privé de Fes, Route Ain Chkef Fes, Maroc.\n"
                + "Réalisée dans le cadre d'un projet de formation en Java par, Yasser SBAI Etudiant en GI3\n"
                + "FES,Maroc 2016", "A propos", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jmAboutActionPerformed

    private void jmCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmCutActionPerformed
        // TODO add your handling code here:
        jTextArea1.cut();
    }//GEN-LAST:event_jmCutActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BlocNotes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BlocNotes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BlocNotes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlocNotes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BlocNotes().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem ChkBWordWrap;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jOpenFile;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuItem jmAbout;
    private javax.swing.JMenuItem jmCopy;
    private javax.swing.JMenuItem jmCut;
    private javax.swing.JMenuItem jmDateTime;
    private javax.swing.JMenuItem jmExit;
    private javax.swing.JMenuItem jmFont;
    private javax.swing.JMenuItem jmGet;
    private javax.swing.JMenuItem jmNewFile;
    private javax.swing.JMenuItem jmPage;
    private javax.swing.JMenuItem jmPaste;
    private javax.swing.JMenuItem jmPrint;
    private javax.swing.JMenuItem jmSave;
    private javax.swing.JMenuItem jmSaveAs;
    private javax.swing.JMenuItem jmSeek;
    private javax.swing.JMenuItem jmSeekNext;
    private javax.swing.JMenuItem jmSeekReplace;
    private javax.swing.JMenuItem jmSelectAll;
    private javax.swing.JMenuItem jmUndo;
    // End of variables declaration//GEN-END:variables
}
